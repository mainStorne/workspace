[project]
name = "project"
version = "0.0.1"
description = "Project"
authors = [{ name = "Dmitry", email = "dbevzpr@mail.ru" }]
readme = "README.md"
keywords = ['python']
requires-python = ">=3.11"
classifiers = [
  "Intended Audience :: Developers",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
  "alembic>=1.15.1",
  "asyncpg>=0.30.0",
  "crontab>=1.0.1",
  "datamodel-code-generator>=0.30.0",
  "fastapi>=0.115.11",
  "fastapi-sqlalchemy-toolkit>=0.7.12",
  "geoalchemy2>=0.17.1",
  "grpc-interceptor>=0.15.4",
  "grpcio>=1.71.0",
  "grpcio-tools>=1.71.0",
  "ipykernel>=6.29.5",
  "polyfactory>=2.21.0",
  "protobuf>=5.29.4",
  "pydantic-settings>=2.8.1",
  "sqlmodel>=0.0.24",
  "structlog>=25.3.0",
  "uvicorn>=0.34.0",
]


[dependency-groups]
dev = []
linters = ["ruff>=0.11.8"]
tests = [
  "freezegun>=1.5.1",
  "httpx>=0.28.1",
  "pytest>=8.3.5",
  "pytest-cov>=6.1.1",
]


[tool.pytest.ini_options]
testpaths = ["tests"]

[tool.ruff]
target-version = "py39"
line-length = 120
fix = true


[tool.ruff.format]
quote-style = "single"
docstring-code-format = true
skip-magic-trailing-comma = false

[tool.ruff.lint.isort]
force-sort-within-sections = true
combine-as-imports = true
order-by-type = true
split-on-trailing-comma = true


[tool.ruff.lint]
select = [
  "F",   # Pyflakes
  "C90", # mccabe
  "I",   # isort
  "N",   # pep8-naming
  # "D", # pydocstyle
  "UP",    # pyupgrade
  "YTT",   # flake8-2020
  "ANN",   # flake8-annotations
  "ASYNC", # flake8-async
  "S",     # flake8-bandit
  "BLE",   # flake8-blind-except
  # "FBT", # flake8-boolean-trap
  "B", # flake8-bugbear
  "A", # flake8-builtins
  #  "COM", # flake8-commas
  # "CPY", # flake8-copyright
  "C4", # flake8-comprehensions
  # "DTZ", # flake8-datetimezf
  "T10", # flake8-debugger
  # "DJ", # flake8-django
  "EM",  # flake8-errmsg
  "EXE", # flake8-executable
  # "ISC", # flake8-implicit-str-concat
  "ICN", # flake8-import-conventions
  "G",   # flake8-logging-format
  "INP", # flake8-no-pep420
  "PIE", # flake8-pie
  "T20", # flake8-print
  # "PYI", # flake8-pyi
  # "PT", # flake8-pytest-style
  # "Q", # flake8-quotes
  "RSE",  # flake8-raise
  "RET",  # flake8-return
  "SLF",  # flake8-self
  "SLOT", # flake8-slots
  "SIM",  # flake8-simplify
  "TID",  # flake8-tidy-imports
  "TCH",  # flake8-type-checking
  "INT",  # flake8-gettext
  "ARG",  # flake8-unused-arguments
  "PTH",  # flake8-use-pathlib
  "TD",   # flake8-todos
  "FIX",  # flake8-fixme
  "ERA",  # eradicate
  # "PD", # pandas-vet
  "PGH", # pygrep-hooks
  "PL",  # Pylint
  "TRY", # tryceratops
  "FLY", # flynt
  # "NPY", # NumPy-specific rules
  # "AIR", # Airflow
  "PERF", # Perflint
  "FURB", # refurb
  "LOG",  # flake8-logging
  "RUF",  # Ruff-specific rules
]
exclude = [
  ".venv",
  "*/alembic/versions/*",
  '*/generated/*',
  'generated.py',
  "db_homework/*",
]
ignore = [
  # LineTooLong
  "E501",
  # DoNotAssignLambda
  "E731",
  "EM101",
  "N818",
  "ANN",
  "ARG",
  "ERA001",
  "INP001",
  "TCH002",
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "PLR0913", "ARG001", "ANN202", "PLR2004"]
"*/grpc/*" = ["N802"]


[tool.coverage.run]
branch = true
omit = ["tests/*"]


[tool.coverage.report]
show_missing = true
skip_covered = true
precision = 2
exclude_lines = [
  "pragma: no cover",
  "if __name__ == '__main__'",
  "raise NotImplementedError",
  "return NotImplemented",
]
