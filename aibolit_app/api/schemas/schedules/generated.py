# generated by datamodel-codegen:
#   filename:  openapi.json
#   timestamp: 2025-05-08T18:56:56+00:00

from __future__ import annotations

from datetime import datetime
from typing import List, Optional, Union

from pydantic import BaseModel, Field


class ScheduleCard(BaseModel):
    medicine_name: str = Field(..., title='Medicine Name')
    medicine_datetime: datetime = Field(..., title='Medicine Datetime')


class ScheduleCreate(BaseModel):
    medicine_name: str = Field(..., title='Medicine Name')
    intake_period: str = Field(
        ...,
        description='Период приёмов записывается в [cron синтаксисе](https://en.wikipedia.org/wiki/Cron#CRON_expression), пример 0 12 * * * - каждый день в ровно 12 часов дня. **W и # символы не поддерживаются**',
        examples=['0 12 * * *'],
        title='Intake Period',
    )
    user_id: int = Field(..., title='User Id')
    intake_finish: Optional[datetime] = Field(
        ...,
        description='Конец лечения, null - если нет ограничения в длительности лечения',
        title='Intake Finish',
    )
    intake_start: Optional[datetime] = Field('2025-05-08T18:53:08.620660Z', title='Intake Start')


class ScheduleRead(BaseModel):
    id: int = Field(..., title='Id')


class TakingsRead(BaseModel):
    medicine_name: str = Field(..., title='Medicine Name')
    medicine_datetime: datetime = Field(..., title='Medicine Datetime')
    id: int = Field(..., title='Id')


class ValidationError(BaseModel):
    loc: List[Union[str, int]] = Field(..., title='Location')
    msg: str = Field(..., title='Message')
    type: str = Field(..., title='Error Type')


class HTTPValidationError(BaseModel):
    detail: Optional[List[ValidationError]] = Field(None, title='Detail')
